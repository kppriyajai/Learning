1. Create a file name NewConfig.ps1 file and add the following contents

configuration NewConfig
{
    Node AllNodes
    {
        WindowsFeature IIS
        {
            Ensure               = 'Present'
            Name                 = 'Web-Server'
            IncludeAllSubFeature = $true
        }
    }
}
2. Create a file called config.ps1 and add the following contents. Run the file on the target machine. Ensure to change aspects such as the Automation Account URL and the key

Once you executed the config.ps1 file, it will generate a folder

Then execute the following command

Set-DscLocalConfigurationManager -Path ./DscMetaConfigs

# The DSC configuration that will generate metaconfigurations
[DscLocalConfigurationManager()]
Configuration DscMetaConfigs
{
     param
     (
         [Parameter(Mandatory=$True)]
         [String]$RegistrationUrl,
 
         [Parameter(Mandatory=$True)]
         [String]$RegistrationKey,
 
         [Parameter(Mandatory=$True)]
         [String[]]$ComputerName,
 
         [Int]$RefreshFrequencyMins = 30,
 
         [Int]$ConfigurationModeFrequencyMins = 15,
 
         [String]$ConfigurationMode = 'ApplyAndMonitor',
 
         [String]$NodeConfigurationName,
 
         [Boolean]$RebootNodeIfNeeded= $False,
 
         [String]$ActionAfterReboot = 'ContinueConfiguration',
 
         [Boolean]$AllowModuleOverwrite = $False,
 
         [Boolean]$ReportOnly
     )
 
     if(!$NodeConfigurationName -or $NodeConfigurationName -eq '')
     {
         $ConfigurationNames = $null
     }
     else
     {
         $ConfigurationNames = @($NodeConfigurationName)
     }
 
     if($ReportOnly)
     {
         $RefreshMode = 'PUSH'
     }
     else
     {
         $RefreshMode = 'PULL'
     }
 
     Node $ComputerName
     {
         Settings
         {
             RefreshFrequencyMins           = $RefreshFrequencyMins
             RefreshMode                    = $RefreshMode
             ConfigurationMode              = $ConfigurationMode
             AllowModuleOverwrite           = $AllowModuleOverwrite
             RebootNodeIfNeeded             = $RebootNodeIfNeeded
             ActionAfterReboot              = $ActionAfterReboot
             ConfigurationModeFrequencyMins = $ConfigurationModeFrequencyMins
         }
 
         if(!$ReportOnly)
         {
         ConfigurationRepositoryWeb AzureAutomationStateConfiguration
             {
                 ServerUrl          = $RegistrationUrl
                 RegistrationKey    = $RegistrationKey
                 ConfigurationNames = $ConfigurationNames
             }
 
             ResourceRepositoryWeb AzureAutomationStateConfiguration
             {
                 ServerUrl       = $RegistrationUrl
                 RegistrationKey = $RegistrationKey
             }
         }
 
         ReportServerWeb AzureAutomationStateConfiguration
         {
             ServerUrl       = $RegistrationUrl
             RegistrationKey = $RegistrationKey
         }
     }
}
 
 # Create the metaconfigurations
 # NOTE: DSC Node Configuration names are case sensitive in the portal.
 # TODO: edit the below as needed for your use case
$Params = @{
     RegistrationUrl = 'https://48c66e92-f2eb-41b5-b656-d80714edd870.agentsvc.ne.azure-automation.net/accounts/48c66e92-f2eb-41b5-b656-d80714edd870';
     RegistrationKey = 'mqVTA2tgXC2yrvDIr/anS1TUQdWfSUmjVKFJc5+z9uvgNrwR/WW9UbE1bqBwZvj0bQzJrzoHd9dmRlX/vHTrHw==';
     ComputerName = @('demovm');
     NodeConfigurationName = 'NewConfig.AllNodes';
     RefreshFrequencyMins = 30;
     ConfigurationModeFrequencyMins = 15;
     RebootNodeIfNeeded = $False;
     AllowModuleOverwrite = $False;
     ConfigurationMode = 'ApplyAndMonitor';
     ActionAfterReboot = 'ContinueConfiguration';
     ReportOnly = $False;  # Set to $True to have machines only report to AA DSC but not pull from it
}
 
# Use PowerShell splatting to pass parameters to the DSC configuration being invoked
# For more info about splatting, run: Get-Help -Name about_Splatting
DscMetaConfigs @Params
